# -*- coding: utf-8 -*-
"""RetailSalesProject01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pHttK_IqVh4v9LUzlm8hfQ75Delnf3uZ
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

pd.read_csv('/content/drive/Shareddrives/MATH 2327 3439 - Data/data/retail_sales/sales.csv')

df = pd.read_csv('/content/drive/Shareddrives/MATH 2327 3439 - Data/data/retail_sales/sales.csv')
# this data set includes store number, department number, the weekly sales and if it's a holiday or not.



"""
# Inspecting the data"""

## checking data types
df.dtypes

## checking for 'NaN'
df.isna().sum()

## get rid of 'dept' column because it is not needed
df = df.drop(columns=['Dept'])

## making 'Date' column into date/time format
df['Date'] = pd.to_datetime(df['Date'])

"""# Selecting subsets and grouping of the data"""

df.head()

## group by month
df['Month'] = df['Date'].dt.month
grouped_month_cols =['Store', 'Month']
## Group by the average sales for store.
grouped_stores_by_month_df = pd.DataFrame(df.groupby(grouped_month_cols)['Weekly_Sales'].agg('sum'))

grouped_stores_by_month_df

df

# #Group store sales by week
df['Week'] = df['Date'].dt.isocalendar().week

# Group by 'Store' and 'Week', then sum 'Weekly_Sales'
grouped_stores_by_week_df = df.groupby(['Store', 'Week'])['Weekly_Sales'].sum().reset_index()

# If you want to create a new DataFrame with the result
grouped_stores_by_week_df = pd.DataFrame(grouped_stores_by_week_df)

# Display the result
print(grouped_stores_by_week_df)

grouped_stores_by_week_df.head()

## Group weeks 1, 44-52 together in a data frame.
target_weeks = [44,45,46,47,48,49,50,51,52] # the weeks around christmas holiday
target_stores = [5, 36, 23, 14] # Highest and lowest sale stores, with some middle sales stores.
target_stores_by_week_df = grouped_stores_by_week_df[(grouped_stores_by_week_df['Week'].isin(target_weeks)) & (grouped_stores_by_week_df['Store'].isin(target_stores))]
target_df = target_stores_by_week_df.groupby(['Store', 'Week'], as_index=False)['Weekly_Sales']
target_stores_by_week_df

## New Data Frame with 4 Stores to represent relationship between weekly sales throughout the year.
four_stores_df = grouped_stores_by_week_df[grouped_stores_by_week_df['Store'].isin(target_stores)].copy()

four_stores_df

## Group by the average sales for True or False (True meaning it was a week with a holiday, False if there was no holiday that week.)
grouped_holiday_df = df.groupby('IsHoliday')['Weekly_Sales'].agg('mean')

grouped_holiday_df.head()

## group by month, weekly sales, where each store has its own line on the graph.

## create new column in data frame group by month.
df['Month'] = df['Date'].dt.month
grouped_cols =['Store', 'Month']

grouped_data = df.groupby(grouped_cols)['Weekly_Sales'].sum().reset_index()

grouped_data

"""##Graphing Data"""

grouped_holiday_df.plot(kind='bar', xlabel='Holiday', ylabel='Sales per Week', title= 'Average Weekly Sales at Stores During Holidays vs Not in 2010')

## graph comparing weekly sales pre/post holiday
for store_number, data in target_stores_by_week_df.groupby('Store'):
    plt.plot(data['Week'], data['Weekly_Sales'], label=f'Store {store_number}')
plt.xlabel('Week')
plt.ylabel('Average Sales')
plt.title('Average Sales by Store and Week')
plt.legend()
plt.show()

## week 46 was Nov. 15 -Nov 21 in 2010
## week 48 was Nov. 29 - Dec 15 in 2010
## week 49 was Dec. 6 - Dec 12 in 2010
## week 51 was Dec. 20 - Dec 26 in 2010

## graph comparing weekly sales averages per month, for each store. Where each store is respresented by its own line, and the average is taken.
# for store_number, data in grouped_data.groupby('Store'):
#     plt.plot(data['Month'], data['Weekly_Sales'], label=f'Store {store_number}')

# plt.xlabel('Month')
# plt.ylabel('Total Weekly Sales')
# plt.title('Total Weekly Sales by Store and Month')
# plt.show()

## graph comparing weekly sales averages per month, for each store. Where each store is respresented by its own line, and the average is taken.

## New and improved graph
for store_number, data in grouped_stores_by_month_df.groupby('Store'):
    plt.plot(data['Month'], data['Weekly_Sales'], label=f'Store {store_number}')
plt.xlabel('Month')
plt.ylabel('Average Sales')
plt.title('Average Sales by Store and Month')
plt.legend()
plt.show()

"""##Data Frame 2"""

df_2 = pd.read_csv('/content/drive/Shareddrives/MATH 2327 3439 - Data/data/retail_sales/store_features.csv')
# this dataset includes the temperature, fuel price, markdowns1,2,3,4,5? CPI, unemployment rate and if its a holiday.

df_2

## na percentage of the entire datafram
df_2.isna().sum()/df_2.shape[0]

#Replacing na with 0s
values = {'MarkDown1': 0, 'MarkDown2':0, 'MarkDown3': 0, 'MarkDown4': 0, 'MarkDown5':0 }
df_2 = df_2.fillna(value = values)

df_2 = df_2.dropna(how= 'all')

## Converting 'Date' column to date time format
df_2['Date'] = pd.to_datetime(df_2['Date'])

## Subsetting all holiday data
df_2_holiday = df_2[df_2['IsHoliday']== True]
df_2_holiday.head()

## counting unique holiday dates
df_2_holiday['Date'].nunique()

#Unique holiday months
df_2_holiday['Date'].dt.month.unique()

#Stats for all holidays
df_2_holiday['CPI'].describe()

df_2_holiday.head()

#subset of all non holidays
df_2_nonHoliday = df_2[df_2['IsHoliday']==False]

#Stats for all non holidays
df_2_nonHoliday['CPI'].describe()

#All unique non holiday dates
df_2_nonHoliday['Date'].unique()

# counting all unique holiday dates
df_2_nonHoliday['Date'].nunique()

df_2_nonHoliday['CPI'].max()

df_2_nonHoliday.head()

plt.bar(df_2_nonHoliday['Date'].dt.month, df_2_nonHoliday['CPI'], color= 'blue')
plt.bar(df_2_holiday['Date'].dt.month, df_2_holiday['CPI'], color='red' )
plt.title('Month vs. CPI ')

##Concluding, no correlation between CPI and holiday
df_2.boxplot('CPI', by ='IsHoliday', vert = False)

df_2_holiday['Fuel_Price'].describe()

df_2_nonHoliday['Fuel_Price'].describe()

df_2.boxplot('Fuel_Price', by = 'IsHoliday', vert = False)

plt.bar(df_2_nonHoliday['Date'].dt.month, df_2_nonHoliday['Fuel_Price'], color = 'red', alpha = 0.7)
plt.bar(df_2_holiday['Date'].dt.month, df_2_holiday['Fuel_Price'], color = 'blue', alpha= 0.7)
plt.title('Month vs. Fuel Price')

## Exploring relationhsip between CPI and fuel prices
df_2_holiday.plot( kind = 'scatter', x ='CPI', y= 'Fuel_Price', color = 'blue')
df_2_nonHoliday.plot( kind = 'scatter', x ='CPI', y= 'Fuel_Price', color = 'red')

##I want to add all the markdowns for each data frame and take the average ,plot
## I want to add all the markdowns for eac date and take the average, plot

avg_Markdown_Hol= (df_2_holiday['MarkDown1'].sum()+ df_2_holiday['MarkDown2'].sum()+ df_2_holiday['MarkDown3'].sum()+ df_2_holiday['MarkDown4'].sum()+ df_2_holiday['MarkDown5'].sum())/5

df_2_holiday.tail()

df_2_holiday.shape

markdowns = df_2_holiday.iloc[0:585 ,4:9]

average_Markdown_byMonth = df_2_holiday.groupby(df_2_holiday['Date'].dt.month).agg({'MarkDown1': 'mean', 'MarkDown2': 'mean', 'MarkDown3': 'mean', 'MarkDown4': 'mean', 'MarkDown5': 'mean'})

average_Markdown_byMonth

average_Markdown_byMonth = average_Markdown_byMonth.reset_index()

fig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(nrows=5, ncols=1, figsize=(8, 20))
ax1.bar(average_Markdown_byMonth['Date'], average_Markdown_byMonth['MarkDown1'], color='blue', alpha=0.75)
ax1.set_title('MarkDown 1')
ax1.set_ylim([0, 10000])

ax2.bar(average_Markdown_byMonth['Date'], average_Markdown_byMonth['MarkDown2'], color='red', alpha=0.75)
ax2.set_title('MarkDown 2')
ax2.set_ylim([0, 10000]);

ax3.bar(average_Markdown_byMonth['Date'], average_Markdown_byMonth['MarkDown3'], color='pink', alpha=0.75)
ax3.set_title('MarkDown 3')
ax3.set_ylim([0, 10000]);

ax4.bar(average_Markdown_byMonth['Date'], average_Markdown_byMonth['MarkDown4'], color='orange', alpha=0.75)
ax4.set_title('MarkDown 4')
ax4.set_ylim([0, 10000]);

ax5.bar(average_Markdown_byMonth['Date'], average_Markdown_byMonth['MarkDown5'], color='purple', alpha=0.75)
ax5.set_title('MarkDown 5')
ax5.set_ylim([0, 10000]);
fig.tight_layout()

#plt.boxplot(df_2['IsHoliday'], avg_Markdown_Hol)
#plt.boxplot(df_2['IsHoliday'], avg_Markdown_nonHol)

fig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(nrows=5, ncols=1, figsize=(8, 20))
ax1.bar(df_2_holiday['Date'].dt.month, df_2_holiday['MarkDown1'], color='blue', alpha=0.75)
ax1.set_title('MarkDown 1')
ax1.set_ylim([0, 10000])

ax2.bar(df_2_holiday['Date'].dt.month, df_2_holiday['MarkDown2'], color='red', alpha=0.75)
ax2.set_title('MarkDown 2')
ax2.set_ylim([0, 10000]);

ax3.bar(df_2_holiday['Date'].dt.month, df_2_holiday['MarkDown3'], color='pink', alpha=0.75)
ax3.set_title('MarkDown 3')
ax3.set_ylim([0, 10000]);

ax4.bar(df_2_holiday['Date'].dt.month, df_2_holiday['MarkDown4'], color='orange', alpha=0.75)
ax4.set_title('MarkDown 4')
ax4.set_ylim([0, 10000]);

ax5.bar(df_2_holiday['Date'].dt.month, df_2_holiday['MarkDown5'], color='purple', alpha=0.75)
ax5.set_title('MarkDown 5')
ax5.set_ylim([0, 10000]);
fig.tight_layout()

fig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(nrows=5, ncols=1, figsize=(8, 20))

ax1.bar(df_2_nonHoliday['Date'].dt.month, df_2_nonHoliday['MarkDown1'], color='blue', alpha=0.75)
ax1.set_title('MarkDown 1')
ax1.set_ylim([0, 10000])

ax2.bar(df_2_nonHoliday['Date'].dt.month, df_2_nonHoliday['MarkDown2'], color='red', alpha=0.75)
ax2.set_title('MarkDown 2')
ax2.set_ylim([0, 10000]);

ax3.bar(df_2_nonHoliday['Date'].dt.month, df_2_nonHoliday['MarkDown3'], color='pink', alpha=0.75)
ax3.set_title('MarkDown 3')
ax3.set_ylim([0, 10000]);

ax4.bar(df_2_nonHoliday['Date'].dt.month, df_2_nonHoliday['MarkDown4'], color='orange', alpha=0.75)
ax4.set_title('MarkDown 4')
ax4.set_ylim([0, 10000]);

ax5.bar(df_2_nonHoliday['Date'].dt.month, df_2_nonHoliday['MarkDown5'], color='purple', alpha=0.75)
ax5.set_title('MarkDown 5')
ax5.set_ylim([0, 10000]);
fig.tight_layout()

fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1)

df_2.boxplot('Fuel_Price', by = 'IsHoliday', vert = False, ax=ax1)
df_2.boxplot('Fuel_Price', by = 'IsHoliday', vert = False, ax=ax2)

"""## Data Frame 3"""

df_3 = pd.read_csv('/content/drive/Shareddrives/MATH 2327 3439 - Data/data/retail_sales/stores.csv')
# this df includes the store number, store type? and size of the store.

df_3

"""##Inspecting the Data"""

df_3.isna().sum()

"""## Joining Data Sets

"""

## merge data sets 1 and 3, focusing on store, store size, and week
merged_df_1_3 = pd.merge(target_stores_by_week_df, df_3, on='Store')
grouped_1_3_cols = ['Store', 'Size', 'Week']
## groupby weekly sales
grouped_merged_df_1_3 = merged_df_1_3.groupby(grouped_1_3_cols)['Weekly_Sales'].sum()

merged_df_1_3

# Save it to a new data frame
grouped_merged_df_1_3 = pd.DataFrame(grouped_merged_df_1_3)

grouped_merged_df_1_3

"""## Graphing Data"""

# Create a line plot with markers using seaborn
sns.set(style="whitegrid")
# plt.figure(figsize=(12, 10))

# Use the relplot function to create a line plot with markers
sns.relplot(data=merged_df_1_3, x='Week', y='Weekly_Sales', hue='Store', style='Size', kind='line', markers=True, height=4, aspect=2)

# Set plot labels and title
plt.xlabel('Week')
plt.ylabel('Weekly Sales')
plt.title('Relationship between Store Size, Week, and Weekly Sales for Each Store')

# Show the plot
plt.show()

"""## Merged Data frames 1 and 2

I was going to explore the relationship between temperature and weekly sales but there wasn't enough data to find a correlation. For example, most stores did not have multiple years of data for the same week. Because of this I couldnt compare temperatures from one year to another and their weekly sales.
"""

# df_2['Date'] = pd.to_datetime(df_2['Date'])

# df_2['Month']=df_2['Date'].dt.month

# df_2 = df_2[df_2['Month']==6]

# new_df_2 = pd.DataFrame({'Store': df_2['Store'], 'Temperature': df_2['Temperature'], 'Month': df_2['Month'], 'Date': df_2['Date']})

# new_df_2

# new_df_2['Week']=new_df_2['Date'].dt.week
# new_df_2['Year']=new_df_2['Date'].dt.year

# new_df_2 = new_df_2[new_df_2['Store'].isin(target_stores)]
# new_df_2 = new_df_2[new_df_2['Year']==2010]

# new_df_2

# new_df_2[new_df_2['Store'].isin(target_stores)]

# new_df_2 = new_df_2.drop(columns=['Month'])

# merged_1_and_2_df = pd.merge(grouped_stores_by_week_df, new_df_2, on='Week', suffixes=('_grouped', '_new'))
# merged_1_and_2_df = pd.merge(grouped_stores_by_week_df, new_df_2, on='Store')

# merged_1_and_2_df

# grouped_1_and_2 = ['Store', 'Week', 'Weekly_Sales', 'Temperature']
# merged_1_and_2_df = pd.DataFrame(merged_1_and_2.groupby(grouped_1_and_2)['Weekly_Sales'])

# merged_1_and_2_df.head()

# plt.figure(figsize=(12, 8))

# # Plot Temperature for each store
# for store in merged_1_and_2_df['Store'].unique():
#     store_data = merged_1_and_2_df[merged_1_and_2_df['Store'] == store]
#     plt.plot(store_data['Week'], store_data['Temperature'], label=f'Store {store}', marker='o')

# # Set labels and title
# plt.xlabel('Week')
# plt.ylabel('Temperature')
# plt.title('Temperature Variation for Each Store Over Weeks')

# # Add legend
# plt.legend()

# # Show the plot
# plt.show()

